trigger:
- main  # Define the branch to trigger the pipeline (e.g., when changes are pushed to 'master')

pool:
  vmImage: 'ubuntu-latest'  # Specify the VM image for the build agent

resources:
- repo: self

variables:
  tag: '${Build.BuildId}'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'  # Specify the Node.js version you want to use
    checkLatest: true

- script: |
    # Install Node.js dependencies
    npm install

    # Testing Node.js app
    npm test
  displayName: 'Test Node.js App'

- script:
    npm run coverage
  displayName: 'Running Test Coverage'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml

# - task: PublishTestResults@2
#   inputs:
#     testResultsFormat: 'JUnit'
#     testResultsFiles: '**/jest-junit.xml'
#     searchFolder: '$(System.DefaultWorkingDirectory)'
#     failTaskOnFailedTests: true
#   displayName: 'Publish Jest Test Results'

# - task: WhiteSource@21
#   inputs:
#     cwd: '$(System.DefaultWorkingDirectory)'
#     displayName: 'Vulnerability Scan using MendBolt'

# - task: PublishCodeCoverageResults@1
#   inputs:
#     codeCoverageTool: 'Cobertura'
#     summaryFileLocation: 'coverage/cobertura-coverage.xml'

# - task: SonarCloudPrepare@1
#   inputs:
#     SonarCloud: 'SonarCloud'
#     organization: 'guelmisdevops'
#     scannerMode: 'CLI'
#     configMode: 'manual'
#     cliProjectKey: 'guelmisdevops_testdevsuproject'
#     cliProjectName: 'TestDevsuProject'
#     cliSources: '.'
#   displayName: 'SonarCloud Step 1'
# - task: SonarCloudAnalyze@1
# - task: SonarCloudPublish@1
#   inputs:
#     pollingTimeoutSec: '300'
#   displayName: 'SonarCloud Step 2'
  
- task: Docker@2
  displayName: Build an image and Pushing to DockerHub
  inputs:
    containerRegistry: 'GuelmisDockerHub'
    repository: 'guelmisedwards/devsutest'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: '$(tag)'
# # steps:
# # - script: echo K8s Pipeline
# #     displayName: 